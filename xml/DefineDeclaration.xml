<?xml version="1.0" encoding="utf-8"?>

<!--                      Introduction

  Each xml document must be enclosed in the root element <document>
  There are three types of data structures:
    - node : node_name = { .... }
    - element : element_type = value_data
    - value : value_data
  To represent each one in xml we use the following notation:
    for a node:
      <node type="type_name" id="id_name">
        <...>
      </node>
      where :
        - type is a category name for the node. More on this subject later
        - id is used to identify the node in the said category
    for an element:
      <element type="type_name">
        <value_xml_element>
      </element>
      where :
        - type is the element_type of the element
    for a value:
      <value type="type_name" id="id_name"/>
      where :
        - type is the type of the data, either cstype for no dependecy or define for a list of defined values
        - id is the data's id from the type above    
-->

<!--                              Nodes
  
  As we mentioned earlier, nodes have a type and an id. For types, we have three main ones:
    1. Defines
      - These are node types that mean game data, ie. buildings, trade goods, countries etc.
      - Their name must be unique. There can't be two countries with the same name, buildings etc.
    2. Structs
      - These are node types that are used for scripting arguments ie. triggers, modifiers etc.
    TBD : Boolean ? or are they also structs ?
    
  There are two ways a node can appear in an xml file:
    1. As a reference, when it is used inside the structure definiton of another node
      - Here there are only 2 parameters, "type" and "id" . They are used as a search query for the node definition
    2. As a structural definition:
      - Here there are several parameters:
        - "id" and "type" , same as above
        - "cstype", representing the value type of the node, only aplicable to define node types
        - "save", is indication that this value should be stored in a LUT entry. Only aplicable to define node types
        - "value", representing the value of the node, only aplicable to struct nodes
      
        
  How do we store node values?
-->

<!--                             Defines

  Defines declaration is a two step process:
    1. In the file Defines.xml we declare every Defines type data that will be present in the game.
        As mentioned earlier, defines will be by default unique values, so if game data contains a define type
        with two identical values, it will give a parsing error.
    2. Each define type will have a valid structure specification xml file. This file will represent the validation
        structure for the specified define type.
       

-->

<!--                              Conditional declaration

  When declaring node structure, it is useful for parsing to define rules for certain attributes
  Several tags are available:
    <requiered></required>  This tag is used to signal that the child elements inside the tag are
    required to exist in order to consider it a valid entry. The opposite tag, <optional></optional>
    is by default and it's not needed to specify it
    
    <single></single> This tag specifies that only one occurrence if the child tags should appear in a
    valid entry. The opposite tag, <multiple></multiple> is enabled by default and not needed explicitly
    
    <exclusive>
      <option name="Option_name0">
      <option>
      <option name="Option_name1">
      </option>
      ...
    </exclusive>  This tag specifies that the entry must follow the pattern of only one of the child options
    
    
    *Note : the optional tags may be added for added verbosity, but omitting them will not affect parsing logic
    
-->
<document>
  
</document>
